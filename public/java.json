{
  "language": "java",
  "version": "11",
  "file":
  {
    "name": "Solution.java",
    "content": "public class Solution {\n    public static void mergeSort(int[] arr, int left, int right) {\n        if (left < right) {\n            int mid = (left + right) / 2;\n            mergeSort(arr, left, mid);\n            mergeSort(arr, mid + 1, right);\n            merge(arr, left, mid, right);\n        }\n    }\n\n    public static void merge(int[] arr, int left, int mid, int right) {\n        int n1 = mid - left + 1;\n        int n2 = right - mid;\n\n        int[] leftArr = new int[n1];\n        int[] rightArr = new int[n2];\n\n        for (int i = 0; i < n1; i++) {\n            leftArr[i] = arr[left + i];\n        }\n        for (int j = 0; j < n2; j++) {\n            rightArr[j] = arr[mid + 1 + j];\n        }\n\n        int i = 0, j = 0, k = left;\n\n        while (i < n1 && j < n2) {\n            if (leftArr[i] <= rightArr[j]) {\n                arr[k++] = leftArr[i++];\n            } else {\n                arr[k++] = rightArr[j++];\n            }\n        }\n\n        while (i < n1) {\n            arr[k++] = leftArr[i++];\n        }\n        while (j < n2) {\n            arr[k++] = rightArr[j++];\n        }\n    }\n}\n"
  },
  "stdin": "",
  "args": [],
  "compile_timeout": 10000,
  "run_timeout": 3000,
  "compile_memory_limit": -1,
  "run_memory_limit": -1,
  "qid": "qid1"
}